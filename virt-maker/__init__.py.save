#!/usr/bin/python

## Import libraries
import os
import ast
import sys
import imp
import json
import time
import yaml
import shutil
import jinja2
import urllib2
import inspect
import hashlib
import argparse
import filelock
import cPickle as pickle
from distutils.spawn import find_executable



## Settings
settings = {
  'verbose':True,
  'varlib':'/var/lib/virt-maker',
  'catalog':'/var/lib/virt-maker/catalog',
  'store':'/var/lib/virt-maker/store',
  'cache':'/var/lib/virt-maker/cache',
  'providerdir':'/var/lib/virt-maker/providers',
  'trycmd':True,
  'safedelta':True
}


## Marshal object
marshal = {
      "link":{},
      "image":None,
      "status":True,
      "messages":[],
      "settings":settings,
      "buildchain":[],
      "commands":[],  ## For futures use, all commands are appended to this allowing a shell script to be generated
}


## Globals
locks = {}



## File locking
class Flock:

  ## Imports
  import os
  import time
  import uuid
  import hashlib
  import threading
  from cPickle import loads as load_
  from cPickle import dumps as dump_


  ## Globals
  locks       = {}
  threads     = {}
  evaluations = 5
  eval_delay  = 1
  lock_poll   = 0.1
  lock_life   = None


  ## Methods

  def __init__(self,lockroot='/tmp'):
    """ Constructor """
    self.lockroot = lockroot
    self.id = str(self.uuid.uuid4())


  def load(self,filepath):
    """ Load method """
    if self.os.path.isfile(filepath):
      with open(filepath,'r') as f:
        return(self.load_(f.read()))
    return(False)


  def dump(self,data,filepath):
    """ Load method """
    with open(filepath,'w') as f:
      return(f.write(self.dump_(data)))


  def get_lock_file(self,filepath):
    """ Gets a lockfile path for a given file path """
    filepath = self.os.path.abspath(filepath)
    filehash = str(self.hashlib.md5(filepath).hexdigest())
    lockfile_path = self.os.path.join(self.lockroot,'.'+filehash+'.lock')
    return(lockfile_path)


  def is_locked(self,filepath):
    """ Returns whether or not the given file is locked """
    lockfile = self.get_lock_file(filepath)
    self.time.sleep(self.eval_delay)
    if self.os.path.isfile(lockfile):
      lock = self.load(lockfile)
      time = lock['timestamp']
      locked = False
      for i in range(1,self.evaluations):
        self.time.sleep(self.eval_delay)
        lock = self.load(lockfile)
        try:
          if not time == lock['timestamp']:
            locked = True
        except:
          locked = True
      return(locked)
    else:
      return(False)


  def heartbeat(self,filepath):
    """ Maintains a lock """
    start = self.time.time()
    while self.locks[filepath]:
      lock = {}
      lock['id'] = self.id
      lock['filepath'] = filepath
      lock['timestamp'] = self.time.time()
      self.dump(lock,self.get_lock_file(filepath))
      if not self.lock_life == None:
        if (self.lock_life - start) <= 0:
          self.locks['filepath'] = False
      self.time.sleep(self.lock_poll)
      if self.load(self.get_lock_file(filepath)) == False or not self.os.path.exists(self.get_lock_file(filepath)):
        break


  def lock(self,filepath):
    """ Lock a given file """
    filepath = self.os.path.abspath(filepath)
    if not self.is_locked(filepath):
      #get_lock_file(filepath)
      self.locks[filepath] = True
      self.threads[filepath] = self.threading.Thread(target=self.heartbeat,args=(filepath,))
      (self.threads[filepath]).start()
      return(True)
    else:
      return(False)
    
  def unlock(self,filepath):
    filepath = self.os.path.abspath(filepath)
    self.locks[filepath] = False
    if self.os.path.isfile(self.get_lock_file(filepath)):
      self.os.remove(self.get_lock_file(filepath))

  def unlock_all(self):
    for i in self.locks:
      self.unlock(i)


## Start locks
flock = Flock()



## Prep dirs
dirs = [settings['varlib'], settings['store'], settings['catalog'], settings['cache']]
for dir in dirs:
  if not os.path.isdir(dir): os.makedirs(dir)

## Prints verbose statements
def verbose(text, label='INFO'):
  print('\t%s: %s' % (label, text))


## Exit cleanup
def cleanup():
  flock.unlock_all()

## Parses DSL Variables
def dsl2opt(text, providerchar='@'):
  options = {}
  text = '\n' + text
  text = text.replace('\n%s' % (providerchar), '\n\n%s' % (providerchar))
  headertext = text.split('\n%s' % (providerchar))[0]
  for i in headertext.split('\n'):
    if '=' in i:
      key = i.split('=')[0]
      val = '='.join(i.split('=')[1:])
      options[key] = val
  return(options)


## Parses DSL Statements
def dsl2dict(text, options=False, mutatestr='<[%s]>', providerchar='@'):
  text = '\n\n' + text
  text = text.replace('\n%s' % (providerchar), '\n\n%s' % (providerchar))
  text = providerchar.join(text.split('\n' + providerchar)[1:])
  if options:
    for i in options:
      key = mutatestr % (i.split('=')[0])
      val = options[i]
      text = text.replace(key, val)
  sectionsraw = text.split('\n%s' % (providerchar))
  sections = []
  lasthash = 'start'
  lastprovider = None
  for s in sectionsraw:
    head = s.split('\n')[0]
    body = ('\n'.join(s.split('\n')[1:-1])).replace('\\%s' % (providerchar), '%s' % (providerchar))
    if not s.startswith('#'):
      sections.append(
        {
          "provider":head.split(' ')[0],
          "argument":head.replace('%s ' % (head.split(' ')[0]), ''),
          "body":body.split('\n#%s' % (providerchar))[0],
        }
      )
      if sections[-1]['provider'] == '':
        sections[-1]['provider'] = lastprovider
      lastprovider = sections[-1]['provider']
      sections[-1]['hash'] = hashlib.md5(lasthash + json.dumps(sections[-1])).hexdigest()
      lasthash = sections[-1]['hash']
  return(sections)


## Parses YAML Statements
def yml2dict(text):
  data_raw = yaml.load(text)
  env = jinja2.Environment()
  namespace = {}
  parameters = {}
  definitionOrig = yaml.load(text)
  lastEval = 'start'
  definition = definitionOrig
  while not json.dumps(definition) == lastEval:
    lastEval = json.dumps(definition)
    definition = load(env.from_string(dump(definitionOrig)).render(definition))
  count_steps = len(definition['steps'])
  steps_messy = definition['steps']

  steps = []
  for step in steps_messy:
    corrected = {'provider':step.keys()[0]}
    if not type(step.keys()[0]) == type({}):
      corrected['argument'] = step[step.keys()[0]]
      corrected['body'] = ''
    else:
      corrected['argument'] = step['args']
      corrected['body'] = step['body']
    steps.append(corrected)

  c = 0
  lastprovider = ''
  sections = steps
  while c <= len(sections):
    if sections[-1]['provider'] == '':
      sections[-1]['provider'] = lastprovider
    lastprovider = sections[-1]['provider']
    sections[-1]['hash'] = hashlib.md5(lasthash + json.dumps(sections[-1])).hexdigest()
    lasthash = sections[-1]['hash']
    c += 1

  return(sections)


## Adds previous hashes to links
def filterPrevHash(buildchain):
  new = []
  last = None
  for link in buildchain:
    link['last'] = last
    last = link['hash']
    new.append(link)
  buildchain = new
  return(buildchain)


## Searches a provider module for a given hook
def hasHook(filepath, hookname):
  module = imp.load_source(hookname, filepath)
  members = inspect.getmembers(module)
  for i in members:
    if i[0] == hookname:
      return(True)
  return(False)


## Download files from url
def fetch(url, dest):
  verbose("Fetching '%s'" % (url), 'Download')
  req = urllib2.urlopen(url)
  CHUNK = 16 * 1024
  count = 0
  total = int(req.headers["Content-Length"])
  lastmsg = None
  with open(dest, 'wb') as fp:
    while True:
      percent = int(float(count / total) * 100)
      chunk = req.read(CHUNK)
      count += CHUNK
      if not chunk: break
      if not (count % (CHUNK * 32)):
        if not lastmsg == str(percent):
          verbose('%s' % (str(percent)), 'Download')
          lastmsg = str(percent)
      fp.write(chunk)
  verbose('Done', 'Download')


## Handle the image
class Image:

  def snapshot(self, last, next):
    os.chdir(settings['cache'])
    cmd = 'qemu-img create -f qcow2 -b %s %s >/dev/null 2>&1' % (last, next)
    if settings['verbose'] > 1:
      cmd = 'qemu-img create -f qcow2 -b %s %s' % (last, next)
      print(cmd)
    if not os.system(cmd) == 0:
      os.remove(next)

  def mount(self, link):
    imagefile = link
    while flock.is_locked(imagefile):
      print('[ Lock ] File {} locked, waiting'.format(imagefile))
      time.sleep(10)
    if not flock.lock(imagefile):
      print('[ Lock ] Cannot acquire {}'.format(imagefile))
      sys.exit(1)
    else:
      print('[ Lock ] Acquired {}'.format(imagefile))
    mountdir = '%s_mount' % (imagefile)
    if not os.path.isdir(mountdir):
      try: os.makedirs(mountdir)
      except: pass
    cmd = 'guestmount -a %s --rw %s/ -i >/dev/null 2>&1' % (imagefile, mountdir)
    if settings['verbose'] > 1:
      cmd = 'guestmount -a %s --rw %s/ -i' % (imagefile, mountdir)
      print(cmd)
    try: os.system(cmd)
    except:
      os.chdir(mountdir)
      self.unmount(link)
      os.system(cmd)
    os.system('ls')
    os.system('pwd')
    os.chdir(mountdir)
    flock.unlock(imagefile)


  def unmount(self, link):
    os.chdir('..')
    imagefile = link
    mountdir = '%s_mount' % (imagefile)
    cmd = 'guestunmount %s/ >/dev/null 2>&1' % (mountdir)
    if settings['verbose'] > 1:
      cmd = 'guestunmount %s/' % (mountdir)
      print(cmd)
    os.system(cmd)
    if os.path.isdir(mountdir): shutil.rmtree(mountdir)


## Pre processor
def pre(marshal):
  orig = marshal
  chain = marshal['buildchain']
  for link in chain:
    marshal['link'] = link
    providerfile = '%s/%s.py' % (settings['providerdir'], link['provider'])
    if os.path.isfile(providerfile):
      if hasHook(providerfile, 'pre'):
        module = imp.load_source('pre', providerfile)
        marshal = module.pre(marshal)
        del module
      if not marshal['status']:
        print('Error!')
        sys.exit(1)
  return(marshal)


## YAML based Blueprints


## Build VBP file
def build(marshal):


  ## Setup main
  '/'.join(sys.argv[-1].split('/')[:-1])
  vbpdir = os.path.abspath('/'.join(sys.argv[-1].split('/')[:-1])).replace('\\', '/')
  #workingdir = (vbpdir + '/.virt-maker')
  workingdir = settings['cache']
  image = Image()
  cwd = os.getcwd()
  chain = []
  steps = 0
  delta = True


  ## Prepare the marshal object
  marshal['image'] = image

  ## Setup workspace
  if not os.path.isdir(workingdir):
    os.makedirs(workingdir)

