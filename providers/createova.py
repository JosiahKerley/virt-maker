import os



def sha1OfFile(filepath):
  import hashlib
  sha = hashlib.sha1()
  with open(filepath, 'rb') as f:
    while True:
      block = f.read(2**10) # Magic number: one-megabyte blocks.
      if not block: break
      sha.update(block)
    return sha.hexdigest()

def build(marshal):
  args = marshal['link']['argument']
  body = marshal['link']['body']
  hash = marshal['link']['hash']
  verbose = marshal['settings']['verbose']
  settings = marshal['settings']


  template = '''<?xml version="1.0" encoding="UTF-8"?>
<!--Generated by VMware VirtualCenter Server, User: NGID\Administrator, UTC time: 2015-05-29T03:23:37.126352Z-->
<Envelope vmw:buildId="build-1312298" xmlns="http://schemas.dmtf.org/ovf/envelope/1" xmlns:cim="http://schemas.dmtf.org/wbem/wscim/1/common" xmlns:ovf="http://schemas.dmtf.org/ovf/envelope/1" xmlns:rasd="http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_ResourceAllocationSettingData" xmlns:vmw="http://www.vmware.com/schema/ovf" xmlns:vssd="http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_VirtualSystemSettingData" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <References>
    <File ovf:href="replacethiswiththenameofthedisk" ovf:id="file1" ovf:size="68096" />
  </References>
  <DiskSection>
    <Info>Virtual disk information</Info>
    <Disk ovf:capacity="10" ovf:capacityAllocationUnits="byte * 2^20" ovf:diskId="vmdisk1" ovf:fileRef="file1" ovf:format="http://www.vmware.com/interfaces/specifications/vmdk.html#streamOptimized" ovf:populatedSize="0" />
  </DiskSection>
  <NetworkSection>
    <Info>The list of logical networks</Info>
    <Network ovf:name="replacethiswiththenameofthenetwork">
      <Description>The replacethiswiththenameofthenetwork network</Description>
    </Network>
  </NetworkSection>
  <VirtualSystem ovf:id="generalpurposeovatemplate">
    <Info>A virtual machine</Info>
    <Name>generalpurposeovatemplate</Name>
    <OperatingSystemSection ovf:id="107" vmw:osType="centos64Guest">
      <Info>The kind of installed guest operating system</Info>
      <Description>CentOS 4/5/6 (64-bit)</Description>
    </OperatingSystemSection>
    <VirtualHardwareSection>
      <Info>Virtual hardware requirements</Info>
      <System>
        <vssd:ElementName>Virtual Hardware Family</vssd:ElementName>
        <vssd:InstanceID>0</vssd:InstanceID>
        <vssd:VirtualSystemIdentifier>generalpurposeovatemplate</vssd:VirtualSystemIdentifier>
        <vssd:VirtualSystemType>vmx-08</vssd:VirtualSystemType>
      </System>
      <Item>
        <rasd:AllocationUnits>hertz * 10^6</rasd:AllocationUnits>
        <rasd:Description>Number of Virtual CPUs</rasd:Description>
        <rasd:ElementName>4 virtual CPU(s)</rasd:ElementName>
        <rasd:InstanceID>1</rasd:InstanceID>
        <rasd:ResourceType>3</rasd:ResourceType>
        <rasd:VirtualQuantity>4</rasd:VirtualQuantity>
      </Item>
      <Item>
        <rasd:AllocationUnits>byte * 2^20</rasd:AllocationUnits>
        <rasd:Description>Memory Size</rasd:Description>
        <rasd:ElementName>4096MB of memory</rasd:ElementName>
        <rasd:InstanceID>2</rasd:InstanceID>
        <rasd:ResourceType>4</rasd:ResourceType>
        <rasd:VirtualQuantity>4096</rasd:VirtualQuantity>
      </Item>
      <Item>
        <rasd:Address>0</rasd:Address>
        <rasd:Description>SCSI Controller</rasd:Description>
        <rasd:ElementName>SCSI controller 0</rasd:ElementName>
        <rasd:InstanceID>3</rasd:InstanceID>
        <rasd:ResourceSubType>lsilogic</rasd:ResourceSubType>
        <rasd:ResourceType>6</rasd:ResourceType>
      </Item>
      <Item>
        <rasd:Address>1</rasd:Address>
        <rasd:Description>IDE Controller</rasd:Description>
        <rasd:ElementName>IDE 1</rasd:ElementName>
        <rasd:InstanceID>4</rasd:InstanceID>
        <rasd:ResourceType>5</rasd:ResourceType>
      </Item>
      <Item>
        <rasd:Address>0</rasd:Address>
        <rasd:Description>IDE Controller</rasd:Description>
        <rasd:ElementName>IDE 0</rasd:ElementName>
        <rasd:InstanceID>5</rasd:InstanceID>
        <rasd:ResourceType>5</rasd:ResourceType>
      </Item>
      <Item ovf:required="false">
        <rasd:AutomaticAllocation>false</rasd:AutomaticAllocation>
        <rasd:ElementName>Video card</rasd:ElementName>
        <rasd:InstanceID>6</rasd:InstanceID>
        <rasd:ResourceType>24</rasd:ResourceType>
        <vmw:Config ovf:required="false" vmw:key="enable3DSupport" vmw:value="false" />
        <vmw:Config ovf:required="false" vmw:key="use3dRenderer" vmw:value="automatic" />
        <vmw:Config ovf:required="false" vmw:key="useAutoDetect" vmw:value="false" />
        <vmw:Config ovf:required="false" vmw:key="videoRamSizeInKB" vmw:value="4096" />
      </Item>
      <Item ovf:required="false">
        <rasd:AutomaticAllocation>false</rasd:AutomaticAllocation>
        <rasd:ElementName>VMCI device</rasd:ElementName>
        <rasd:InstanceID>7</rasd:InstanceID>
        <rasd:ResourceSubType>vmware.vmci</rasd:ResourceSubType>
        <rasd:ResourceType>1</rasd:ResourceType>
        <vmw:Config ovf:required="false" vmw:key="allowUnrestrictedCommunication" vmw:value="false" />
      </Item>
      <Item ovf:required="false">
        <rasd:AddressOnParent>0</rasd:AddressOnParent>
        <rasd:AutomaticAllocation>false</rasd:AutomaticAllocation>
        <rasd:ElementName>CD/DVD drive 1</rasd:ElementName>
        <rasd:InstanceID>8</rasd:InstanceID>
        <rasd:Parent>4</rasd:Parent>
        <rasd:ResourceSubType>vmware.cdrom.remotepassthrough</rasd:ResourceSubType>
        <rasd:ResourceType>15</rasd:ResourceType>
        <vmw:Config ovf:required="false" vmw:key="backing.exclusive" vmw:value="false" />
      </Item>
      <Item>
        <rasd:AddressOnParent>0</rasd:AddressOnParent>
        <rasd:ElementName>Hard disk 1</rasd:ElementName>
        <rasd:HostResource>ovf:/disk/vmdisk1</rasd:HostResource>
        <rasd:InstanceID>9</rasd:InstanceID>
        <rasd:Parent>3</rasd:Parent>
        <rasd:ResourceType>17</rasd:ResourceType>
        <vmw:Config ovf:required="false" vmw:key="backing.writeThrough" vmw:value="false" />
      </Item>
      <Item ovf:required="false">
        <rasd:AddressOnParent>0</rasd:AddressOnParent>
        <rasd:AutomaticAllocation>false</rasd:AutomaticAllocation>
        <rasd:Description>Floppy Drive</rasd:Description>
        <rasd:ElementName>Floppy drive 1</rasd:ElementName>
        <rasd:InstanceID>10</rasd:InstanceID>
        <rasd:ResourceSubType>vmware.floppy.remotedevice</rasd:ResourceSubType>
        <rasd:ResourceType>14</rasd:ResourceType>
      </Item>
      <Item>
        <rasd:AddressOnParent>7</rasd:AddressOnParent>
        <rasd:AutomaticAllocation>true</rasd:AutomaticAllocation>
        <rasd:Connection>replacethiswiththenameofthenetwork</rasd:Connection>
        <rasd:Description>VmxNet3 ethernet adapter on "replacethiswiththenameofthenetwork"</rasd:Description>
        <rasd:ElementName>Network adapter 1</rasd:ElementName>
        <rasd:InstanceID>11</rasd:InstanceID>
        <rasd:ResourceSubType>VmxNet3</rasd:ResourceSubType>
        <rasd:ResourceType>10</rasd:ResourceType>
        <vmw:Config ovf:required="false" vmw:key="wakeOnLanEnabled" vmw:value="true" />
      </Item>
      <vmw:Config ovf:required="false" vmw:key="cpuHotAddEnabled" vmw:value="false" />
      <vmw:Config ovf:required="false" vmw:key="cpuHotRemoveEnabled" vmw:value="false" />
      <vmw:Config ovf:required="false" vmw:key="firmware" vmw:value="bios" />
      <vmw:Config ovf:required="false" vmw:key="virtualICH7MPresent" vmw:value="false" />
      <vmw:Config ovf:required="false" vmw:key="virtualSMCPresent" vmw:value="false" />
      <vmw:Config ovf:required="false" vmw:key="memoryHotAddEnabled" vmw:value="false" />
      <vmw:Config ovf:required="false" vmw:key="nestedHVEnabled" vmw:value="false" />
      <vmw:Config ovf:required="false" vmw:key="powerOpInfo.powerOffType" vmw:value="preset" />
      <vmw:Config ovf:required="false" vmw:key="powerOpInfo.resetType" vmw:value="preset" />
      <vmw:Config ovf:required="false" vmw:key="powerOpInfo.standbyAction" vmw:value="powerOnSuspend" />
      <vmw:Config ovf:required="false" vmw:key="powerOpInfo.suspendType" vmw:value="preset" />
      <vmw:Config ovf:required="false" vmw:key="tools.afterPowerOn" vmw:value="true" />
      <vmw:Config ovf:required="false" vmw:key="tools.afterResume" vmw:value="true" />
      <vmw:Config ovf:required="false" vmw:key="tools.beforeGuestShutdown" vmw:value="true" />
      <vmw:Config ovf:required="false" vmw:key="tools.beforeGuestStandby" vmw:value="true" />
      <vmw:Config ovf:required="false" vmw:key="tools.syncTimeWithHost" vmw:value="false" />
      <vmw:Config ovf:required="false" vmw:key="tools.toolsUpgradePolicy" vmw:value="manual" />
    </VirtualHardwareSection>
  </VirtualSystem>
</Envelope>'''

  defaults = {
    'name':None,
    'filename':None,
    'network':'Default',
  }


  ## Gather input
  inputfile = args
  vmdk = inputfile.replace('qcow2','')+'vmdk'
  for line in body.split('\n'):
    if '=' in line and not '#' in line:
    left = line.split('=')[0]
    right = line.split('=')[-1]
    defaults[left] = right
  if defaults['filename'] == None:
    defaults['filename'] = inputfile.replace('qcow2','')+'ova'
  if defaults['name'] == None:
    defaults['name'] = inputfile.replace('.qcow2','')
  defaults['name'] = defaults['name'].replace(' ','')

  ## Generate OVF
  template = template.replace('generalpurposeovatemplate',defaults['name'])
  template = template.replace('replacethiswiththenameofthenetwork',defaults['network'])
  template = template.replace('replacethiswiththenameofthedisk',vmdk)
  if os.path.isdir(defaults['name']):
    os.system('rm -rf "%s"'%(defaults['name']))
  os.makedirs(defaults['name'])
  with open('%s/%s.ovf'%(defaults['name'],defaults['name']),'w') as f:
    f.write(template)

  ## Create the VMDK
  if verbose:
    cmd = 'qemu-img convert -f qcow2 -O qcow2 %s "%s/%s"'%(inputfile,defaults['name'],vmdk)
    print(cmd)
  else:
    cmd = 'qemu-img convert -p -f qcow2 -O qcow2 %s "%s/%s" >/dev/null 2>&1'%(inputfile,defaults['name'],vmdk)
  os.system(cmd)


  ## Creates the manifest
  os.system('ls %s'%(defaults['name']))
  disksum = sha1OfFile('%s/%s'%(defaults['name'],vmdk))
  ovfsum = sha1OfFile('%s/%s.ovf'%(defaults['name'],defaults['name']))
  with open('%s/%s.mf'%(defaults['name'],defaults['name']),'w') as f:
    f.write('SHA1(%s)= %s\nSHA1(%s.ovf)= %s\n'%(vmdk,disksum,defaults['name'],ovfsum))

  ## Tarball the OVA folder
  os.system('tar cfv %s.ova %s/*.ovf %s/*.mf %s/*.vmdk'%(
      defaults['name'],
      defaults['name'],
      defaults['name'],
      defaults['name']
    )
  )

  return(marshal)


